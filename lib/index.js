// Generated by CoffeeScript 1.6.3
(function() {
  var MakePath, Path, Pipeline, asset_pipeline_factory, fs, load_plugins;

  fs = require('fs');

  Path = require('./path');

  Pipeline = require('./pipeline');

  MakePath = require('./makepath');

  module.exports = asset_pipeline_factory = function(config) {
    var pipeline, result;
    if (config == null) {
      config = {};
    }
    pipeline = new Pipeline(config, MakePath.mappings);
    result = pipeline.middleware();
    result.inlines = pipeline.inlines;
    result.get_file = function() {
      return pipeline.get_file.apply(pipeline, arguments);
    };
    return result;
  };

  load_plugins = function() {
    var err, filename, ok, plugin, _i, _len, _ref, _results;
    _ref = fs.readdirSync(__dirname + '/plugins');
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      filename = _ref[_i];
      try {
        plugin = require('./plugins/' + filename);
        ok = true;
      } catch (_error) {
        err = _error;
        console.error(err);
      }
      if (ok && (plugin.compile != null) && (plugin.source != null)) {
        _results.push(module.exports.register_plugin(plugin));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  module.exports.register_plugin = function(_arg) {
    var compile, ext, source, target, te, _base, _i, _len, _name, _results;
    source = _arg.source, target = _arg.target, compile = _arg.compile;
    if (typeof source === 'string') {
      source = [source];
    }
    if (typeof target === 'string') {
      target = [target];
    }
    _results = [];
    for (_i = 0, _len = source.length; _i < _len; _i++) {
      ext = source[_i];
      if ((_base = MakePath.mappings)[_name = '.' + ext] == null) {
        _base[_name] = {};
      }
      MakePath.mappings['.' + ext][''] = compile;
      if (target != null) {
        _results.push((function() {
          var _j, _len1, _results1;
          _results1 = [];
          for (_j = 0, _len1 = target.length; _j < _len1; _j++) {
            te = target[_j];
            _results1.push(MakePath.mappings['.' + ext]['.' + te.replace(/^\./g, '')] = compile);
          }
          return _results1;
        })());
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  load_plugins();

}).call(this);
