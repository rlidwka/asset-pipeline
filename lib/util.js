// Generated by CoffeeScript 1.4.0
(function() {
  var NoConcurrent, Path, async, exports, fs, make_directories, util, _NoConcurrentCache, _do_log,
    __slice = [].slice;

  Path = require('path');

  fs = require('fs');

  util = require('util');

  async = require('async');

  _do_log = process.env.NODE_DEBUG && /asset\-pipeline/.test(process.env.NODE_DEBUG);

  exports = module.exports = {};

  make_directories = function(dest, cb) {
    var dir;
    dir = Path.dirname(dest);
    if (dir === '.' || dir === '..') {
      return cb();
    }
    return fs.mkdir(dir, function(err) {
      if ((err != null ? err.code : void 0) === 'ENOENT') {
        return make_directories(dir, function() {
          return fs.mkdir(dir, cb);
        });
      } else {
        return cb();
      }
    });
  };

  exports.write_file = function(dest, data, cb) {
    return fs.unlink(dest, function() {
      return fs.writeFile(dest, data, function(err) {
        if ((err != null ? err.code : void 0) === 'ENOENT') {
          return make_directories(dest, function() {
            return fs.writeFile(dest, data, cb);
          });
        } else {
          return cb(err);
        }
      });
    });
  };

  _NoConcurrentCache = {};

  exports.NoConcurrent = NoConcurrent = function(key, cb, func) {
    if (_NoConcurrentCache[key] != null) {
      _NoConcurrentCache[key].push(cb);
      return;
    }
    _NoConcurrentCache[key] = [cb];
    return func(function() {
      var old_queue, _i, _len, _results;
      old_queue = _NoConcurrentCache[key];
      delete _NoConcurrentCache[key];
      _results = [];
      for (_i = 0, _len = old_queue.length; _i < _len; _i++) {
        func = old_queue[_i];
        _results.push(func.apply(null, arguments));
      }
      return _results;
    });
  };

  exports.link_file = function(src, dst, maincb) {
    return NoConcurrent("link " + dst, maincb, function(cb) {
      return fs.unlink(dst, function() {
        return fs.link(src, dst, function(err) {
          if ((err != null ? err.code : void 0) === 'ENOENT') {
            return make_directories(dst, function() {
              return fs.link(src, dst, cb);
            });
          } else {
            return cb(err);
          }
        });
      });
    });
  };

  exports.do_log = function(arg) {
    if (arg != null) {
      _do_log = !!arg;
    }
    return _do_log;
  };

  exports.log = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (_do_log) {
      return util.log.apply(util, args);
    }
  };

}).call(this);
